// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package cache_test

import (
	"sync"
)

var (
	lockAdapterMockDel sync.RWMutex
	lockAdapterMockGet sync.RWMutex
	lockAdapterMockSet sync.RWMutex
)

// AdapterMock is a mock implementation of Adapter.
//
//     func TestSomethingThatUsesAdapter(t *testing.T) {
//
//         // make and configure a mocked Adapter
//         mockedAdapter := &AdapterMock{
//             DelFunc: func(key string) error {
// 	               panic("TODO: mock out the Del method")
//             },
//             GetFunc: func(key string) ([]byte, error) {
// 	               panic("TODO: mock out the Get method")
//             },
//             SetFunc: func(key string, value []byte) error {
// 	               panic("TODO: mock out the Set method")
//             },
//         }
//
//         // TODO: use mockedAdapter in code that requires Adapter
//         //       and then make assertions.
//
//     }
type AdapterMock struct {
	// DelFunc mocks the Del method.
	DelFunc func(key string) error

	// GetFunc mocks the Get method.
	GetFunc func(key string) ([]byte, error)

	// SetFunc mocks the Set method.
	SetFunc func(key string, value []byte) error

	// calls tracks calls to the methods.
	calls struct {
		// Del holds details about calls to the Del method.
		Del []struct {
			// Key is the key argument value.
			Key string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Key is the key argument value.
			Key string
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// Key is the key argument value.
			Key string
			// Value is the value argument value.
			Value []byte
		}
	}
}

// Del calls DelFunc.
func (mock *AdapterMock) Del(key string) error {
	if mock.DelFunc == nil {
		panic("moq: AdapterMock.DelFunc is nil but Adapter.Del was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	lockAdapterMockDel.Lock()
	mock.calls.Del = append(mock.calls.Del, callInfo)
	lockAdapterMockDel.Unlock()
	return mock.DelFunc(key)
}

// DelCalls gets all the calls that were made to Del.
// Check the length with:
//     len(mockedAdapter.DelCalls())
func (mock *AdapterMock) DelCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	lockAdapterMockDel.RLock()
	calls = mock.calls.Del
	lockAdapterMockDel.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *AdapterMock) Get(key string) ([]byte, error) {
	if mock.GetFunc == nil {
		panic("moq: AdapterMock.GetFunc is nil but Adapter.Get was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	lockAdapterMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockAdapterMockGet.Unlock()
	return mock.GetFunc(key)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedAdapter.GetCalls())
func (mock *AdapterMock) GetCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	lockAdapterMockGet.RLock()
	calls = mock.calls.Get
	lockAdapterMockGet.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *AdapterMock) Set(key string, value []byte) error {
	if mock.SetFunc == nil {
		panic("moq: AdapterMock.SetFunc is nil but Adapter.Set was just called")
	}
	callInfo := struct {
		Key   string
		Value []byte
	}{
		Key:   key,
		Value: value,
	}
	lockAdapterMockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	lockAdapterMockSet.Unlock()
	return mock.SetFunc(key, value)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//     len(mockedAdapter.SetCalls())
func (mock *AdapterMock) SetCalls() []struct {
	Key   string
	Value []byte
} {
	var calls []struct {
		Key   string
		Value []byte
	}
	lockAdapterMockSet.RLock()
	calls = mock.calls.Set
	lockAdapterMockSet.RUnlock()
	return calls
}
